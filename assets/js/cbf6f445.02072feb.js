"use strict";(self.webpackChunktech_note=self.webpackChunktech_note||[]).push([[6343],{3905:function(e,t,r){r.d(t,{Zo:function(){return m},kt:function(){return p}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=c(r),p=n,f=d["".concat(s,".").concat(p)]||d[p]||u[p]||o;return r?a.createElement(f,l(l({ref:t},m),{},{components:r})):a.createElement(f,l({ref:t},m))}));function p(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8686:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return m},default:function(){return d}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),l=["components"],i={},s="Form",c={unversionedId:"Angular/form",id:"Angular/form",title:"Form",description:"\u5f15\u7528 mat \u6a23\u5f0f",source:"@site/docs/Angular/form.md",sourceDirName:"Angular",slug:"/Angular/form",permalink:"/tech-note/docs/Angular/form",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Angular/form.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Element",permalink:"/tech-note/docs/Angular/element"},next:{title:"Life Hooks",permalink:"/tech-note/docs/Angular/life_hooks"}},m=[{value:"\u5f15\u7528 mat \u6a23\u5f0f",id:"\u5f15\u7528-mat-\u6a23\u5f0f",children:[],level:2},{value:"form \u8868\u55ae",id:"form-\u8868\u55ae",children:[],level:2},{value:"invalid function",id:"invalid-function",children:[],level:2},{value:"FormGroup",id:"formgroup",children:[],level:2},{value:"Validations",id:"validations",children:[{value:"Nested FormGroup",id:"nested-formgroup",children:[],level:3},{value:"updateValidations",id:"updatevalidations",children:[],level:3},{value:"hasError",id:"haserror",children:[],level:3}],level:2},{value:"ValueChange",id:"valuechange",children:[],level:2},{value:"Custom Async Validators",id:"custom-async-validators",children:[],level:2}],u={toc:m};function d(e){var t=e.components,r=(0,n.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"form"},"Form"),(0,o.kt)("h2",{id:"\u5f15\u7528-mat-\u6a23\u5f0f"},"\u5f15\u7528 mat \u6a23\u5f0f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'\n<mat-form-field>\n  <mat-label>Input</mat-label>\n  <input matInput>\n</mat-form-field>\n\n<mat-form-field>\n  <mat-label>Select</mat-label>\n  <mat-select>\n    <mat-option value="one">First option</mat-option>\n    <mat-option value="two">Second option</mat-option>\n  </mat-select>\n</mat-form-field>\n\n<mat-form-field>\n  <mat-label>Textarea</mat-label>\n  <textarea matInput></textarea>\n</mat-form-field>\n')),(0,o.kt)("h2",{id:"form-\u8868\u55ae"},"form \u8868\u55ae"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<form [formGroup]="subscribeForm" (ngSubmit)="submit()">\n   <mat-form-field class="w-full">\n       <input\n           matInput\n           required\n           type="email" \n           formControlName="email"\n        />\n        <mat-error> Please enter a valid email address </mat-error>\n    </mat-form-field>\n    <button type="submit">submit</button>\n</form>\n')),(0,o.kt)("h2",{id:"invalid-function"},"invalid function"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.tektutorialshub.com/angular/angular-formbuilder-in-reactive-forms/"},"https://www.tektutorialshub.com/angular/angular-formbuilder-in-reactive-forms/")),(0,o.kt)("h2",{id:"formgroup"},"FormGroup"),(0,o.kt)("p",null,"How do I restrict an input to only accept numbers?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<input type="number" ng-model="myText" name="inputName">\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/14615236/how-do-i-restrict-an-input-to-only-accept-numbers"},"How do I restrict an input to only accept numbers?")),(0,o.kt)("h2",{id:"validations"},"Validations"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://angular.io/api/forms/Validators#compose"},"Angular")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"class Validators {\n  static min(min: number): ValidatorFn\n  static max(max: number): ValidatorFn\n  static required(control: AbstractControl): ValidationErrors | null\n  static requiredTrue(control: AbstractControl): ValidationErrors | null\n  static email(control: AbstractControl): ValidationErrors | null\n  static minLength(minLength: number): ValidatorFn\n  static maxLength(maxLength: number): ValidatorFn\n  static pattern(pattern: string | RegExp): ValidatorFn\n  static nullValidator(control: AbstractControl): ValidationErrors | null\n  static compose(validators: ValidatorFn[]): ValidatorFn | null\n  static composeAsync(validators: AsyncValidatorFn[]): AsyncValidatorFn | null\n}\n")),(0,o.kt)("h3",{id:"nested-formgroup"},"Nested FormGroup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"this.contactForm = this.formBuilder.group({\n  firstname: ['', [Validators.required, Validators.minLength(10)]],\n  lastname: ['', [Validators.required, Validators.maxLength(15), Validators.pattern(\"^[a-zA-Z]+$\")]],\n  email: ['', [Validators.required, Validators.email]],\n  gender: ['', [Validators.required]],\n  isMarried: ['', [Validators.required]],\n  country: ['', [Validators.required]],\n  address: this.formBuilder.group({\n    city: ['', [Validators.required]],\n    street: ['', [Validators.required]],\n    pincode: ['', [Validators.required]],\n  })\n});\n\n")),(0,o.kt)("h3",{id:"updatevalidations"},"updateValidations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"this.fromName.get(\"formControlName\").setValidators([Validators.required]);\n//setting validations\nthis.fromName.get(\"formControlName\").setErrors({'required':true});\n//error message\nthis.myForm.controls['controlName'].clearValidators()\n//clear valiations\nthis.fromName.updateValueAndValidity();\n//update validation\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/51300628/angular-reactive-forms-set-and-clear-validators"},"Angular reactive forms set and clear validators")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.tektutorialshub.com/angular/how-to-add-validators-dynamically-using-setvalidators-in-angular/"},"https://www.tektutorialshub.com/angular/how-to-add-validators-dynamically-using-setvalidators-in-angular/")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"private destroy$: ReplaySubject<boolean> = new ReplaySubject(1);\n")),(0,o.kt)("h3",{id:"haserror"},"hasError"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"<mat-error *ngIf=\"inviteeEmailItem.hasError('required')\">\n        <span>Please enter email.</span>\n</mat-error>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"note \nconst pattern = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}/;\n// REF: https://www.w3resource.com/javascript/form/email-validation.php\nconst pattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n")),(0,o.kt)("h2",{id:"valuechange"},"ValueChange"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.tektutorialshub.com/angular/valuechanges-in-angular-forms/"},"value change")),(0,o.kt)("h2",{id:"custom-async-validators"},"Custom Async Validators"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Injectable } from '@angular/core';\nimport {AbstractControl, FormControl, FormGroup, ValidationErrors} from '@angular/forms';\nimport {Observable, of} from 'rxjs';\nimport {delay, map} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ZipcodeService {\n  private validZipcodes = ['00001', '00002', '00003', '00004'];\n\n  fakeHttp(value: string) {\n    return of(this.validZipcodes.includes(value)).pipe(delay(5000));\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {ZipcodeService} from './zipcode.service';\nimport {AbstractControl, AsyncValidatorFn, ValidationErrors} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nexport class ZipcodeValidator {\n  static createValidator(zipcodeService: ZipcodeService): AsyncValidatorFn {\n    return (control: AbstractControl): Observable<ValidationErrors> => {\n      return zipcodeService.fakeHttp(control.value).pipe(\n        map((result: boolean) => result ? null : {invalidAsync: true})\n      );\n    };\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {Component, OnInit} from '@angular/core';\nimport { FormControl, FormGroup, Validators} from '@angular/forms';\nimport {ZipcodeService} from './zipcode.service';\nimport {ZipcodeValidator} from './zipcode-validator';\n\n@Component({\n  selector: 'app-async-validator-demo',\n  templateUrl: './async-validator-demo.component.html',\n  styleUrls: ['./async-validator-demo.component.scss']\n})\nexport class AsyncValidatorDemoComponent implements OnInit {\n  address: FormGroup;\n  zipcodeSyncValidators = [\n    Validators.required,\n    Validators.pattern('\\\\d{5}')\n  ];\n\n  constructor(private zipcodeService: ZipcodeService) {}\n\n  ngOnInit(): void {\n    this.address = new FormGroup({\n      zipcode: new FormControl('',\n       this.zipcodeSyncValidators,\n       ZipcodeValidator.createValidator(this.zipcodeService))\n    });\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://medium.com/@rinciarijoc/angular-custom-async-validators-13a648d688d8"},"Angular: Custom Async Validators")))}d.isMDXComponent=!0}}]);